from telethon import TelegramClient
import csv
import asyncio
import os
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = 28498140
API_HASH = "b89416509108bf0931497220a301ed37"
SESSION_NAME = "session_name"
CHANNELS = ["GID_ScamBase", "metka_RO", "s_c_a_m_e_r_s_s", "scambase_nft"]
CSV_FILE = "base2.csv"

def read_existing_messages():
    if not os.path.exists(CSV_FILE):
        return set()
    
    existing = set()
    with open(CSV_FILE, 'r', encoding='utf-8', newline='') as f:
        reader = csv.DictReader(f)
        for row in reader:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–∑ channel + message_id
            unique_key = f"{row['channel']}_{row['message_id']}"
            existing.add(unique_key)
    return existing

def save_messages(messages, existing_keys):
    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    new_messages = []
    for msg in messages:
        unique_key = f"{msg['channel']}_{msg['message_id']}"
        if unique_key not in existing_keys:
            new_messages.append(msg)
    
    if not new_messages:
        print("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    file_exists = os.path.exists(CSV_FILE)
    with open(CSV_FILE, 'a', encoding='utf-8', newline='') as f:
        writer = csv.DictWriter(f, fieldnames=["text", "date", "channel", "message_id"])
        
        if not file_exists:
            writer.writeheader()
        
        writer.writerows(new_messages)
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(new_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

async def parse_channels(client):
    print("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤...")
    
    existing_keys = read_existing_messages()
    all_messages = []
    
    for channel in CHANNELS:
        try:
            print(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞: {channel}")
            channel_messages = []
            async for message in client.iter_messages(channel):
                if message.text:
                    channel_messages.append({
                        "text": message.text.replace('\n', ' ').replace('\r', ' '),
                        "date": message.date.strftime("%Y-%m-%d %H:%M:%S"),
                        "channel": channel,
                        "message_id": str(message.id)
                    })
            
            all_messages.extend(channel_messages)
            print(f"‚úì {channel}: –ø–æ–ª—É—á–µ–Ω–æ {len(channel_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {channel}: {str(e)}")

    save_messages(all_messages, existing_keys)

async def main():
    async with TelegramClient(SESSION_NAME, API_ID, API_HASH) as client:
        await parse_channels(client)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...")
    asyncio.run(main())
    print("üõë –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")