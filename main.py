import telebot
from telebot import types
import csv
import os
import re
from glob import glob
import time
from dotenv import load_dotenv

load_dotenv()
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7753002573:AAEPGMtrrAQ3SkPC0d2eZdXwpw6um64063M"
CSV_FILES_PATTERN = "data/*.csv"  # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ CSV —Ñ–∞–π–ª–æ–≤
WHITELIST_FILE = "data/whitelist.csv"  # –§–∞–π–ª —Å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="Markdown")

def is_in_whitelist(query):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ whitelist"""
    if not os.path.exists(WHITELIST_FILE):
        return False
    
    try:
        with open(WHITELIST_FILE, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                if 'text' in row and query.lower() in row['text'].lower():
                    return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist: {e}")
    return False

def get_all_csv_files():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö CSV —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data, –∏—Å–∫–ª—é—á–∞—è whitelist"""
    all_files = glob(CSV_FILES_PATTERN)
    return [f for f in all_files if not f.endswith('whitelist.csv')]

def get_records_count():
    """–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤–æ –≤—Å–µ—Ö CSV —Ñ–∞–π–ª–∞—Ö, –∏—Å–∫–ª—é—á–∞—è whitelist"""
    total = 0
    for csv_file in get_all_csv_files():
        try:
            with open(csv_file, 'r', encoding='utf-8') as f:
                total += sum(1 for _ in f) - 1  # –í—ã—á–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª–µ {csv_file}: {e}")
    return total

def search_in_all_csv(query):
    """–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º CSV —Ñ–∞–π–ª–∞–º, –∏—Å–∫–ª—é—á–∞—è whitelist"""
    results = []
    for csv_file in get_all_csv_files():
        try:
            with open(csv_file, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for row in reader:
                    if 'text' in row and query.lower() in row['text'].lower():
                        results.append(row)
                        if len(results) >= 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                            return results
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ñ–∞–π–ª–µ {csv_file}: {e}")
    return results

def generate_response(query):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞"""
    if is_in_whitelist(query):
        return {
            'text': f"*üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* `{query}`\n\nüõ° *–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ª–∏—Ü–æ–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.*",
            'parse_mode': 'Markdown'
        }

    results = search_in_all_csv(query)
    
    if not results:
        return {
            'text': f"*üü° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* `{query}`\n\nüîì *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —ç—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–¥–µ–ª–∫–∏ —Å –ø–æ–º–æ—â—å—é –≥–∞—Ä–∞–Ω—Ç–∞.*",
            'parse_mode': 'Markdown'
        }
    else:
        response = "*üî¥ –í–ù–ò–ú–ê–ù–ò–ï! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤*\n\n"
        response += f"üÜî *–ò—Å–∫–æ–º—ã–π ID:* `{query}`\n\n"
        response += "*–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:*\n\n"
        
        for row in results:
            channel = row.get('channel', '')
            message_id = row.get('message_id', '')
            link = f"[–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç](https://t.me/{channel}/{message_id})"
            
            response += (
                f"üìÖ *–î–∞—Ç–∞:* `{row.get('date', '')}`\n"
                f"üì¢ *–ö–∞–Ω–∞–ª:* `{channel}`\n"
                f"üîó {link}\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )
        
        response += (
            "_–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º!_\n\n"
            "*‚ùó –û–ë–†–ê–¢–ò–¢–ï –í–ù–ò–ú–ê–ù–ò–ï: –ë–æ—Ç –º–æ–∂–µ—Ç –æ—à–∏–±–æ—á–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∫–∞–∫ –≤–Ω–µ—Å–µ–Ω–∏–µ –µ–≥–æ –≤ —Å–∫–∞–º –±–∞–∑—É "
            "(–≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö). –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç' –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ "
            "–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∫–∞–º-–±–∞–∑–µ.*"
        )
        return {
            'text': response,
            'parse_mode': 'Markdown',
            'disable_web_page_preview': True
        }

@bot.message_handler(commands=['start'])
def send_welcome(message):
    records_count = get_records_count()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup()
    btn_support = types.InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/clubshowman")
    btn_add = types.InlineKeyboardButton(text="‚òé –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É", url="https://t.me/sendscammerbot")
    markup.row(btn_support, btn_add)
    
    bot.send_message(
        message.chat.id,
        "*üîç –ü–æ–∏—Å–∫ –≤ —Å–∫–∞–º –±–∞–∑–µ*\n"
        "*–í –±–∞–∑–µ –º–æ–µ–≥–æ –±–æ—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–∞–º—ã–µ –∫—Ä—É–ø–Ω—ã–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∞–º–µ—Ä—ã —Å–µ—Ç–∏.*\n\n"
        "*üîç –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*\n"
        "`üÜî 7750581694`\n"
        "`üîó @vetementsup`\n\n"
        "*üì• INLINE-–ü–æ–∏—Å–∫*:\n"
        "`@aptonscambot 7865237782`\n"
        "`@aptonscambot ducktrust`\n\n"
        "*‚ú® –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫*:\n"
        "`/animation 7865237782`\n\n"
        f"*üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ:* `{records_count}`",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.message_handler(commands=['animation'])
def animation_search(message):
    query = message.text.replace('/animation', '').strip()
    if not query:
        bot.send_message(message.chat.id, "‚ùå _–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /animation._", parse_mode="Markdown")
        return
    
    # –°–ø–∏—Å–æ–∫ –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏ –ª—É–ø—ã
    animation_frames = [
        "üîç‚É†", 
        "üîç‚Éò", 
        "üîç‚Éù", 
        "üîç‚Éü",
        "üîç‚Éû",
        "üîç‚Éõ",
        "üîç‚Éú"
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = bot.send_message(message.chat.id, "*–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ...*", parse_mode="Markdown")
    
    # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    for frame in animation_frames * 2:  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é 2 —Ä–∞–∑–∞
        try:
            time.sleep(0.2)
            bot.edit_message_text(
                f"{frame} *–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ...*",
                chat_id=message.chat.id,
                message_id=msg.message_id,
                parse_mode="Markdown"
            )
        except:
            pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º
    try:
        time.sleep(0.3)
        bot.edit_message_text(
            "üîé *–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...*",
            chat_id=message.chat.id,
            message_id=msg.message_id,
            parse_mode="Markdown"
        )
        time.sleep(0.5)
    except:
        pass
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        response = generate_response(query)
        bot.edit_message_text(
            text=response['text'],
            chat_id=message.chat.id,
            message_id=msg.message_id,
            parse_mode=response.get('parse_mode', None),
            disable_web_page_preview=response.get('disable_web_page_preview', False)
        )
    except Exception as e:
        bot.edit_message_text(
            f"‚ùå _–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}_",
            chat_id=message.chat.id,
            message_id=msg.message_id,
            parse_mode="Markdown"
        )

@bot.message_handler(func=lambda m: True)
def search_messages(message):
    query = message.text.strip()
    if not query:
        bot.send_message(message.chat.id, "‚ùå _–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –ø–æ–∏—Å–∫–∞._", parse_mode="Markdown")
        return

    csv_files = get_all_csv_files()
    if not csv_files:
        bot.send_message(message.chat.id, "‚ùå _–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä._", parse_mode="Markdown")
        return

    try:
        response = generate_response(query)
        bot.send_message(
            message.chat.id,
            **response
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå _–û—à–∏–±–∫–∞: {e}_", parse_mode="Markdown")

@bot.inline_handler(func=lambda query: True)
def handle_inline_query(inline_query):
    try:
        query = inline_query.query.strip()
        if not query:
            return
            
        response = generate_response(query)
        
        # –°–æ–∑–¥–∞–µ–º InlineQueryResultArticle
        r = types.InlineQueryResultArticle(
            id='1',
            title=f'–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {query}',
            description='–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç',
            input_message_content=types.InputTextMessageContent(
                message_text=response['text'],
                parse_mode=response.get('parse_mode', None),
                disable_web_page_preview=response.get('disable_web_page_preview', False)
            ),
            thumbnail_url='https://img.icons8.com/color/48/000000/search--v1.png'
        )
        
        bot.answer_inline_query(inline_query.id, [r], cache_time=1)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ inline —Ä–µ–∂–∏–º–µ: {e}")

if __name__ == "__main__":
    print("üîé –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
